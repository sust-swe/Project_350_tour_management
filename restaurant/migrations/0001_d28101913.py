# Generated by Django 2.2.6 on 2019-10-28 12:13

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('homepage', '0001_d28101913'),
    ]

    operations = [
        migrations.CreateModel(
            name='Food',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('img', models.ImageField(blank=True, default=None, null=True, upload_to='FoodPhoto')),
                ('price', models.FloatField()),
                ('person', models.PositiveIntegerField(blank=True, default=1)),
                ('available_at_time', models.CharField(choices=[('b', 'Breakfast'), ('l', 'Lunch'), ('d', 'Dinner'), ('a', 'all time')], max_length=1)),
            ],
            options={
                'ordering': ['restaurant'],
            },
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('mobile', models.IntegerField(blank=True, default=None, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('img', models.ImageField(blank=True, default=None, null=True, upload_to='RestaurantPhoto')),
                ('city', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='homepage.City')),
                ('country', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='homepage.Country')),
                ('user_detail', models.ForeignKey(default=100, on_delete=django.db.models.deletion.CASCADE, to='homepage.UserDetail')),
            ],
            options={
                'ordering': ['user_detail'],
            },
        ),
        migrations.CreateModel(
            name='Orders',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_amount', models.FloatField()),
                ('order_time', models.DateTimeField()),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='homepage.UserDetail')),
            ],
            options={
                'ordering': ['-order_time'],
            },
        ),
        migrations.CreateModel(
            name='OrderDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('food', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='restaurant.Food')),
                ('orders', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='restaurant.Orders')),
            ],
            options={
                'ordering': ['orders'],
            },
        ),
        migrations.AddField(
            model_name='food',
            name='restaurant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='restaurant.Restaurant'),
        ),
        migrations.AddConstraint(
            model_name='restaurant',
            constraint=models.UniqueConstraint(fields=('user_detail', 'name'), name="user's unique restaurant"),
        ),
        migrations.AddConstraint(
            model_name='orders',
            constraint=models.UniqueConstraint(fields=('customer', 'order_time'), name='order primary constraint'),
        ),
        migrations.AddConstraint(
            model_name='orderdetail',
            constraint=models.UniqueConstraint(fields=('orders', 'food'), name='order has unique food'),
        ),
        migrations.AddConstraint(
            model_name='food',
            constraint=models.UniqueConstraint(fields=('restaurant', 'name'), name='unique food in restaurant'),
        ),
        migrations.AddConstraint(
            model_name='food',
            constraint=models.CheckConstraint(check=models.Q(price__gte=0), name='non-negative food price'),
        ),
    ]
